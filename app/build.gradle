plugins {
    id 'com.android.application'
}

android {
    compileSdk 29

    defaultConfig {
        applicationId "io.zigen.zen.oculus_display_system"
        minSdk 24
        targetSdk 29
        versionCode 1
        versionName "0.1"


        externalNativeBuild {
            def ccFlags = ['-Werror', '-Wall', '-Winvalid-pch', '-Wextra', '-Wpedantic']

            ndk {
                abiFilters 'arm64-v8a'
            }

            cmake {
                arguments "-DPROJECT_DIR:STRING=${projectDir}"
                cppFlags += ccFlags + ['-std=c++17']
                cFlags   += ccFlags + ['-std=c11']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
        }
    }

    lint {
        warningsAsErrors true
    }
}

task bootstrapBoost {
    def b2 = new File("${rootProject.projectDir}/3rdParty/boost/b2")
    if (b2.exists()) {
        return
    }

    doLast {
        exec {
            workingDir "${rootProject.projectDir}/3rdParty/boost"
            commandLine './bootstrap.sh'
        }
    }
}

task createBoostUserConfig {
    def boostUserConfig = new File("${buildDir}/boost/user-config.jam")
    if (boostUserConfig.exists()) {
        return
    }

    doLast {
        new File("${buildDir}/boost").mkdir()

        OperatingSystem os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem; 
        def HOST_TAG = "unknown"
        if (os.isLinux()) {
            HOST_TAG = "linux-x86_64"
        } else if(os.isMacOsX()) {
            HOST_TAG = "darwin-x86_64"
        } else {
            throw new org.gradle.api.GradleException("${os.getDisplayName()} is not supported")
        }
        

        boostUserConfig.write(
"""using clang
: android
: ${android.ndkDirectory}/toolchains/llvm/prebuilt/${HOST_TAG}/bin/aarch64-linux-android29-clang++
;
""")

    }
}

task buildBoost {
    if (new File("${buildDir}/boost/include").exists()) {
        return;
    }

    dependsOn bootstrapBoost
    dependsOn createBoostUserConfig

    doLast {
        exec {
            workingDir  "${rootProject.projectDir}/3rdParty/boost"
            executable  "./b2"
            args        "install", 
                        "--with-headers",
                        "toolset=clang",
                        "target-os=android",
                        "link=static",
                        "--user-config=${buildDir}/boost/user-config.jam",
                        "--prefix=${buildDir}/boost"
        }
    }
}
preBuild.dependsOn buildBoost;
